--------------------------------------------------------------create a linked list----------------------------------------------------------------------------
class Node:
    def __init__(self, value):
        slef.data = value
        slef.next = none
class LimkedList:
    def __init__(self):
        self.head = None     #if the LL is empty the head is none i.e there is nothing in the head if there is nothing in the head that means the linked list is empty
        self.n = 0    #initializing the count of the linked list with ZERO
    def __len__(self):
        return self.n
--------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------operations performed in a linked list----------------------------------------------------------------------------
*******************************************************************inserting a node at the head*******************************************************************
class Node:
    def __init__(self, value):
        self.data = value
        self.next = none
class LinkedList:
    def __init__(self):
        slef.head = None
        slef.n = 0
    def __len__(Self):
        return self.n
# a function to add an node at the head of the linkedlist
    def insert_head (self, value):
#creating a new node in the linkedlist
        new_node = Node(value)
#creating the connection in the linkedlist
        new_node.next = self.head   # storing the previous head's memory location in the new node
# assigning the new_node as the head
        self.head = new_node
# increment the value of n for a flexible counting 
        slef.n = slef.n + 1
----------------------------------------------------------------------------------traversal--------------------------------------------------------------------------------------
# a function to traverse the nodes
    def __str__(self):
# assume the head node as the current node
        curr = self.head
# an empty string to store the linkedlist
        result = " "
# a while loop to iterate the curr till the node is None
        while curr is not None:
# if the condition is true then result will be added by the data in the current node and the string "->" right next to it
            result = result + str(curr.data) + "->"
# after that then consider the next node as the current node and loop untill the condition is satisfied
            curr = curr.next
        return result[:-2]
# curr is a varibale where we store the head of the linkedlist, result is a variable where we store the traversal of the linkedlist
using a while loop if the curr node is not None then add the data in the node to the list and concatinate it with "->" now after the
current is iterated to the next node untill the current is not None then return the result and slice the last 2 strings from the linked
list then print the traversal of the linkedlist
L = LinkedList()
L.insert_head(1)
L.insert_head(2)
L.insert_head(3)
L.insert_head(4)
